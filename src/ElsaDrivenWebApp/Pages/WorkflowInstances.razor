@page "/WorkflowInstances"

@using ElsaDrivenWebApp.Shared.Components
@using Radzen
@using Radzen.Blazor

<h3>WorkflowInstances</h3>

@inject UsertaskService userTaskService
@inject ProcessService processService
@inject NavigationManager NavManager

@if (workflowInstances == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <RadzenFieldset Text="Start new">
                    <div class="row">
                        <div class="col-md-4">
                            <RadzenButton Click=@AddSample2Task>Start Sample 2 workflow</RadzenButton>
                        </div>
                        <div class="col-md-4">
                            <RadzenButton Click=@AddSample3Task>Start Sample 3 workflow</RadzenButton>
                        </div>
                        <div class="col-md-4">
                            <RadzenButton Click=@AddSample4Task>Start Sample 4 workflow</RadzenButton>
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
    </div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <RadzenFieldset Text="running">
                    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@workflowInstances" TItem="WorkfowInstanceUsertaskViewModel" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <Columns>
                            <RadzenDataGridColumn TItem="WorkfowInstanceUsertaskViewModel" Property="DefinitionId" Title="Name" Width="300px" />
                            <RadzenDataGridColumn TItem="WorkfowInstanceUsertaskViewModel" Property="WorkflowName" Title="instance name" Width="300px" />
                            <RadzenDataGridColumn TItem="WorkfowInstanceUsertaskViewModel" Property="State" Title="State" Width="300px" />
                            <RadzenDataGridColumn Width="160px" TItem="WorkfowInstanceUsertaskViewModel" Property="WorkflowInstanceId" Title="Action">
                                <Template Context="data">
                                    @foreach (var usertask in data.UserTasks)
                                    {
                                        <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" Class="m-1" Click=@(() => Open(usertask))>
                                            @usertask.TaskTitle - @usertask.TaskDescription
                                        </RadzenButton>
                                        <br />
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenFieldset>
            </div>
        </div>
    </div>
  
    <Usertasksample2 Task=selectedUsertasksample2 OnFinished="TaskFinished2"></Usertasksample2>
    <Usertasksample2a Task=selectedUsertasksample2a OnFinished="TaskFinished2a"></Usertasksample2a>

}
@code {

    private List<WorkfowInstanceUsertaskViewModel>? workflowInstances;
    private string? inputValue;
    private UsertaskViewModel? selectedUsertasksample2 { get; set; } = null;
    private UsertaskViewModel? selectedUsertasksample2a { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        var workflowInstancesArray = await userTaskService.GetWorkflowsWaitingOnUserTask();
        workflowInstances = workflowInstancesArray.ToList();
    }

    private async Task TaskFinished2()
    {

        selectedUsertasksample2 = null;
        await LoadTasks();
    }

    private async Task TaskFinished2a()
    {

        selectedUsertasksample2a = null;
        await LoadTasks();
    }

    private async Task Open(UsertaskViewModel task)
    {
        selectedUsertasksample2 = null;

        switch (task.Signal)
        {
            case "usertasksample2":
                selectedUsertasksample2 = task;
                break;
            case "usertasksample2a":
                selectedUsertasksample2a = task;
                break;
            default:
                NavManager.NavigateTo($"workflowinstancesSignalr/{task.WorkflowInstanceId}");
                break;
        }
    }

    private async Task SendSignal(UsertaskViewModel task)
    {
        await userTaskService.MarkAsComplete(task.WorkflowInstanceId, task.Signal, null);
        await LoadTasks();
    }

    private async Task AddSample2Task()
    {
        var settings = new Envelope<SampleSettings>(new SampleSettings { Name = inputValue });
        await processService.SendSignal("sample2", settings);
        await LoadTasks();
    }

    private async Task AddSample3Task()
    {
        var settings = new Envelope<SampleSettings>(new SampleSettings { Name = inputValue });
        var items = await processService.SendSignal("sample3", settings);
        NavManager.NavigateTo($"workflowinstances/{items.StartedWorkflows.First().WorkflowInstanceId}");
    }

    private async Task AddSample4Task()
    {
        var settings = new Envelope<SampleSettings>(new SampleSettings { Name = inputValue });
        var items = await processService.SendSignal("sample4", settings);
        NavManager.NavigateTo($"workflowinstancesSignalr/{items.StartedWorkflows.First().WorkflowInstanceId}");
    }
    }
